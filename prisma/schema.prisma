generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         String   @default("user")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Order {
  id              Int           @id @default(autoincrement())
  trackingCode    String       @unique
  externalId      String       @unique // ID da transação do gateway
  customerName    String
  customerEmail   String
  status         OrderStatus   @default(PENDING)
  currentStep     Int          @default(1)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  emailSequence   EmailSequence?
  trackingUpdates TrackingUpdate[]
}

model EmailSequence {
  id              Int           @id @default(autoincrement())
  orderId         Int           @unique
  order           Order         @relation(fields: [orderId], references: [id])
  status          SequenceStatus @default(ACTIVE)
  lastEmailSentAt DateTime?
  emailLogs       EmailLog[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model EmailLog {
  id              Int           @id @default(autoincrement())
  sequenceId      Int
  sequence        EmailSequence @relation(fields: [sequenceId], references: [id])
  emailType       EmailType
  status          EmailStatus   @default(PENDING)
  sentAt          DateTime?
  error           String?
  createdAt       DateTime      @default(now())
}

model TrackingUpdate {
  id              Int           @id @default(autoincrement())
  orderId         Int
  order           Order         @relation(fields: [orderId], references: [id])
  status          String
  location        String?
  description     String
  createdAt       DateTime      @default(now())
}

enum OrderStatus {
  PENDING
  DISPATCHED
  IN_TRANSIT
  CUSTOMS
  DELIVERED
  CANCELLED
}

enum SequenceStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum EmailType {
  PURCHASE_CONFIRMATION
  TRANSIT_UPDATE
  CUSTOMS_NOTIFICATION
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

model FunnelTemplate {
  id             Int          @id @default(autoincrement())
  name           String
  payment_method String?
  is_active      Boolean      @default(true)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  steps          FunnelStep[]

  @@map("funnel_templates")
}

model FunnelStep {
  id                Int            @id @default(autoincrement())
  funnel_template   FunnelTemplate @relation(fields: [funnel_template_id], references: [id])
  funnel_template_id Int
  step_number      Int
  email_subject    String
  email_template   String
  delay_hours      Int
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt

  @@map("funnel_steps")
} 