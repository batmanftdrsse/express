datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

enum EmailType {
  WELCOME
  ORDER_CONFIRMATION
  SHIPPING_UPDATE
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
}

model Customer {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  phone     String?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String          @id @default(uuid())
  customerId    String
  customer      Customer        @relation(fields: [customerId], references: [id])
  trackingCode  String          @unique
  status        String          @default("pending")
  amount        Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailSequence EmailSequence?
  funnelSteps   FunnelStep[]
}

model EmailSequence {
  id              String    @id @default(uuid())
  orderId         String    @unique
  order           Order     @relation(fields: [orderId], references: [id])
  currentStep     Int       @default(1)
  status          String    @default("active")
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  lastEmailSentAt DateTime?
  emailLogs       EmailLog[]
}

model EmailLog {
  id           String        @id @default(uuid())
  sequenceId   String
  sequence     EmailSequence @relation(fields: [sequenceId], references: [id])
  step         Int
  emailType    EmailType
  status       EmailStatus
  templateId   String
  sentAt       DateTime      @default(now())
  metadata     String?       // JSON string para SQLite
}

model EmailTemplate {
  id           String       @id @default(uuid())
  name         String
  subject      String
  content      String
  delayHours   Int
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  funnelSteps  FunnelStep[]
}

model FunnelStep {
  id          String        @id @default(uuid())
  orderId     String
  order       Order         @relation(fields: [orderId], references: [id])
  templateId  String
  template    EmailTemplate @relation(fields: [templateId], references: [id])
  status      String
  sentAt      DateTime?
  attempts    Int          @default(0)
  error       String?
}