datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

enum EmailType {
  WELCOME
  ORDER_CONFIRMATION
  SHIPPING_UPDATE
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  orders    Order[]
  address   Address?
  document  CustomerDocument?
}

model CustomerDocument {
  id         Int      @id @default(autoincrement())
  customerId Int      @unique
  customer   Customer @relation(fields: [customerId], references: [id])
  type       String   // CPF ou CNPJ
  number     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id               Int            @id @default(autoincrement())
  trackingCode     String         @unique
  status          String         @default("pending")
  currentStep      Int           @default(1)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  customerId      Int
  customer        Customer       @relation(fields: [customerId], references: [id])
  items           Item[]
  trackingUpdates TrackingUpdate[]
  origin          String?
  destination     String?
  estimatedDelivery DateTime?
  urgentDelivery   Boolean       @default(false)
  emailSequence    EmailSequence?
  funnelSteps      FunnelStep[]
}

model EmailSequence {
  id              Int       @id @default(autoincrement())
  orderId         Int       @unique
  order           Order     @relation(fields: [orderId], references: [id])
  currentStep     Int       @default(1)
  status          String    @default("active")
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  lastEmailSentAt DateTime?
  emailLogs       EmailLog[]
}

model EmailLog {
  id           Int           @id @default(autoincrement())
  sequenceId   Int
  sequence     EmailSequence @relation(fields: [sequenceId], references: [id])
  step         Int
  emailType    EmailType
  status       EmailStatus
  templateId   String
  sentAt       DateTime      @default(now())
  metadata     String?       // JSON string para SQLite
}

model EmailTemplate {
  id           Int          @id @default(autoincrement())
  name         String
  subject      String
  content      String
  delayHours   Int
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  funnelSteps  FunnelStep[]
}

model FunnelStep {
  id          Int           @id @default(autoincrement())
  orderId     Int
  order       Order         @relation(fields: [orderId], references: [id])
  templateId  Int
  template    EmailTemplate @relation(fields: [templateId], references: [id])
  status      String
  sentAt      DateTime?
  attempts    Int          @default(0)
  error       String?
}

model TrackingUpdate {
  id          Int      @id @default(autoincrement())
  status      String
  location    String
  description String?
  createdAt   DateTime @default(now())
  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id])
}

model Address {
  id            Int      @id @default(autoincrement())
  street        String
  streetNumber  String
  complement    String?
  zipCode       String
  neighborhood  String
  city          String
  state         String
  country       String
  customerId    Int      @unique
  customer      Customer @relation(fields: [customerId], references: [id])
}

model Item {
  id          Int      @id @default(autoincrement())
  title       String
  quantity    Int
  unitPrice   Float
  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id])
}