generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         String   @default("user")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String?
  document  Document?
  address   Address?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model Document {
  id         Int      @id @default(autoincrement())
  number     String
  type       String
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @unique

  @@map("documents")
}

model Address {
  id           Int      @id @default(autoincrement())
  street       String
  streetNumber String
  complement   String?
  zipCode      String
  neighborhood String
  city         String
  state        String
  country      String   @default("BR")
  customer     Customer @relation(fields: [customerId], references: [id])
  customerId   Int      @unique

  @@map("addresses")
}

model Transaction {
  id           Int      @id @default(autoincrement())
  amount       Int
  paymentMethod String
  status       String
  installments Int      @default(1)
  paidAt       DateTime?
  order        Order?
  card         Card?
  items        Item[]

  @@map("transactions")
}

model Card {
  id              Int         @id @default(autoincrement())
  brand           String
  lastDigits      String
  holderName      String
  expirationMonth Int
  expirationYear  Int
  transaction     Transaction @relation(fields: [transactionId], references: [id])
  transactionId   Int        @unique

  @@map("cards")
}

model Item {
  id            Int         @id @default(autoincrement())
  title         String
  quantity      Int
  unitPrice     Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int

  @@map("items")
}

model Order {
  id              Int           @id @default(autoincrement())
  trackingCode    String       @unique
  externalId      String       @unique
  customerName    String
  customerEmail   String
  status          String
  currentStep     Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  trackingUpdates TrackingUpdate[]
  customer        Customer     @relation(fields: [customerId], references: [id])
  customerId      Int
  transaction     Transaction? @relation(fields: [transactionId], references: [id])
  transactionId   Int?        @unique
  emailSequence   EmailSequence?

  @@map("orders")
}

model EmailSequence {
  id              Int           @id @default(autoincrement())
  orderId         Int           @unique
  status          SequenceStatus @default(ACTIVE)
  lastEmailSentAt DateTime?
  emailLogs       EmailLog[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  order           Order         @relation(fields: [orderId], references: [id])
}

model EmailLog {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  email       String
  status      EmailStatus   @default(PENDING)
  type        EmailType
  metadata    Json?
  webhookData Json?
  sequence    EmailSequence? @relation(fields: [sequenceId], references: [id])
  sequenceId  Int?
}

model TrackingUpdate {
  id              Int           @id @default(autoincrement())
  orderId         Int
  order           Order         @relation(fields: [orderId], references: [id])
  status          String
  location        String?
  description     String
  createdAt       DateTime      @default(now())
}

enum OrderStatus {
  PENDING
  DISPATCHED
  IN_TRANSIT
  CUSTOMS
  DELIVERED
  CANCELLED
}

enum SequenceStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum EmailType {
  WELCOME
  ORDER_CONFIRMATION
  ABANDONED_CART
  RECOVERY
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
}

model FunnelTemplate {
  id             Int          @id @default(autoincrement())
  name           String
  payment_method String?
  is_active      Boolean      @default(true)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  steps          FunnelStep[]

  @@map("funnel_templates")
}

model FunnelStep {
  id                Int            @id @default(autoincrement())
  funnel_template   FunnelTemplate @relation(fields: [funnel_template_id], references: [id])
  funnel_template_id Int
  step_number      Int
  email_subject    String
  email_template   String
  delay_hours      Int
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt

  @@map("funnel_steps")
} 